const t=JSON.parse('{"key":"v-46b001d1","path":"/codenotes/spring/day04%20Spring%E9%85%8D%E7%BD%AE%E7%B1%BB%E6%95%B4%E5%90%88MyBatis.html","title":"day04 Spring配置类整合MyBatis","lang":"zh-CN","frontmatter":{"title":"day04 Spring配置类整合MyBatis","icon":"write","category":["Spring"],"tag":["Spring","配置类","Spring整合MyBatis"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"知识点 通过注解和配置类使用 Spring ; @Configuration 用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解 ; @ComponentScan(\\"\\") 用于指定Spring在初始化容器时要扫描的包。作用和在Spring的xml配置文件中的一样 ; @Bean 使用在方法上，标注将该方法的返回值存储到Spring容...","head":[["meta",{"property":"og:url","content":"https://noby.site/codenotes/spring/day04%20Spring%E9%85%8D%E7%BD%AE%E7%B1%BB%E6%95%B4%E5%90%88MyBatis.html"}],["meta",{"property":"og:site_name","content":"Noby"}],["meta",{"property":"og:title","content":"day04 Spring配置类整合MyBatis"}],["meta",{"property":"og:description","content":"知识点 通过注解和配置类使用 Spring ; @Configuration 用于指定当前类是一个Spring配置类，当创建容器时会从该类上加载注解 ; @ComponentScan(\\"\\") 用于指定Spring在初始化容器时要扫描的包。作用和在Spring的xml配置文件中的一样 ; @Bean 使用在方法上，标注将该方法的返回值存储到Spring容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-27T13:23:32.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"配置类"}],["meta",{"property":"article:tag","content":"Spring整合MyBatis"}],["meta",{"property":"article:modified_time","content":"2023-03-27T13:23:32.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"知识点","slug":"知识点","link":"#知识点","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]}],"git":{"createdTime":1679852720000,"updatedTime":1679923412000,"contributors":[{"name":"noby","email":"1326981297@qq.com","commits":3}]},"readingTime":{"minutes":6.6,"words":1979},"filePathRelative":"codenotes/spring/day04 Spring配置类整合MyBatis.md","localizedDate":"2023年3月27日"}');export{t as data};
