import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as s,b as l,d as t,a as n,e,r as u}from"./app.759ff6f5.js";const c={},r=l("h2",{id:"http-协议",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#http-协议","aria-hidden":"true"},"#"),t(" HTTP 协议")],-1),d=l("li",null,"HTTP 协议:(HyperText Transfer Protocol)超文本传输协议，规定了浏览器和服务器之间数据传输的规则",-1),h=l("li",null,[t("HTTP 协议特点 "),l("ul",null,[l("li",null,"基于 TCP 协议: TCP 是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全。"),l("li",null,"基于请求-响应模型的:一次请求对应一次响应，请求和响应是一一对应关系"),l("li",null,[t("HTTP 协议是无状态协议:对于事物处理没有记忆能力。每次请求-响应都是独立的，无状态指的是客户端发送 HTTP 请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。这种特性有优点也有缺点， "),l("ul",null,[l("li",null,"缺点:多次请求间不能共享数据"),l("li",null,"优点:速度快")])])])],-1),p={href:"http://www.baidu.com/index.htm",target:"_blank",rel:"noopener noreferrer"},_=l("li",null,[t("请求方式 "),l("ul",null,[l("li",null,"GET 查"),l("li",null,"POST 增"),l("li",null,"PUT 改"),l("li",null,"DELETE 删")])],-1),m=l("li",null,"http://：协议",-1),T={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},g=l("ul",null,[l("li",null,"可以通过其找到 DNS，通过 DNS 可以找到主机地址和端口号")],-1),b=l("h3",{id:"请求数据的格式",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#请求数据的格式","aria-hidden":"true"},"#"),t(" 请求数据的格式")],-1),v=l("li",null,"GET/HTTP/1.1",-1),k=l("li",null,"解释：HTTP 请求中的第一行数据，请求行包含三块内容，分别是 GET[请求方式] /[请求 URL 路径] HTTP/1.1[HTTP 协议及版本]",-1),f={href:"https://host",target:"_blank",rel:"noopener noreferrer"},x=l("li",null,"http/https：协议类型",-1),P={href:"https://host",target:"_blank",rel:"noopener noreferrer"},E=l("ul",null,[l("li",null,"host:服务器的 IP 地址或者域名"),l("li",null,"port:HTTP 服务器的默认端口是 80，这种情况下端口号可以省略。"),l("li",null,"path:访问资源的路径"),l("li",null,"? :url 里面的?这个符号是个分割线，用来区分问号前面的是 path，问号后面的是参数"),l("li",null,"url-params:问号后面的是请求参数，格式：xxx=aaa，如图 4 区域就是请求参数"),l("li",null,"&：多个参数用&符号连接")],-1),H=l("li",null,"POST/GET：请求方式",-1),w=e("<li>请求头 <ul><li>解释：第二行开始，格式为 key: value 形式，请求头中会包含若干个属性，常见的 HTTP 请求头有:</li><li>常用的请求头： <ul><li>Host: 表示请求的主机名</li><li>User-Agent: 浏览器版本,例如 Chrome 浏览器的标识类似 Mozilla/5.0 ...Chrome/79，IE 浏览器的标识类似 Mozilla/5.0 (Windows NT ...)like Gecko；</li><li>Accept：表示浏览器能接收的资源类型，如<code>text/*</code>，<code>image/*</code>或者<code>*/*</code>表示所有；</li><li>Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</li><li>Accept-Encoding：表示浏览器可以支持的压缩类型，例如 gzip, deflate 等。</li></ul></li></ul></li><li>请求体 <ul><li>解释：请求体：POST 请求的最后一部分，存储请求参数</li></ul></li>",2),J=e("<li>GET 请求和 POST 请求区别： <ul><li>get <ul><li>没有请求体，请求参数存放在请求行中</li><li>请求参数显示在浏览器地址栏中可见，相对不安全</li><li>请求数据大小有限制(4k)</li><li>只能发送文本数据</li><li>封装和解析快</li></ul></li><li>post <ul><li>有请求体，请求参数存放在请求体中</li><li>请求参数在浏览器地址栏中不可见，相对安全</li><li>请求数据大小没有限制</li><li>可以发送非文本数据</li><li>封装和解析相对慢</li></ul></li></ul></li>",1),S=e(`<h3 id="响应数据的格式" tabindex="-1"><a class="header-anchor" href="#响应数据的格式" aria-hidden="true">#</a> 响应数据的格式</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  HTTP/1.1 200 OK
  Server:Tengine
  Content-Type:text/html
  Transfer-Encoding:chunked...

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>响应数据 <ul><li>响应行： <ul><li>解释：响应数据的第一行,响应行包含三块内容，分别是 HTTP/1.1[HTTP 协议及版本] 200[响应状态码] ok[状态码的描述]</li><li>组成： <ul><li>HTTP 协议及版本</li><li>200[响应状态码] <ul><li>常用的状态码： <ul><li>200 ok 客户端请求成功</li><li>404 Not Found 请求资源不存在</li><li>500 Internal Server Error 服务端发生不可预期的错误</li></ul></li></ul></li></ul></li></ul></li><li>响应头 <ul><li>解释：第二行开始，格式为 key：value 形式</li><li>常见的响应头: <ul><li>Content-Type：表示该响应内容的类型，例如 text/html，image/jpeg；</li><li>Content-Length：表示该响应内容的长度（字节数）；</li><li>Content-Encoding：表示该响应压缩算法，例如 gzip；</li><li>Cache-Control：指示客户端应如何缓存，例如 max-age=300 表示可以最多缓存 300 秒</li></ul></li></ul></li><li>响应体： 最后一部分。存放响应数据 <ul><li><code>&lt;html&gt;...&lt;/html&gt;</code>这部分内容就是响应体，它和响应头之间有一个空行隔开。</li></ul></li></ul></li></ul><h2 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h2>`,4),C=l("li",null,'Web 服务器是一个应用程序，对 HTTP 协议的操作进行封装，使得程序员不必直接对协议进行操作，让 Web 开发更加便捷。主要功能是"提供网上信息浏览服务"。',-1),q=l("li",null,[t("Web 服务器的作用 "),l("ul",null,[l("li",null,"封装 HTTP 协议操作，简化开发"),l("li",null,"可以将 Web 项目部署到服务器中，对外提供网上浏览服务")])],-1),A=l("li",null,"Tomcat 是 Apache 软件基金会一个核心项目，是一个开源免费的轻量级 Web 服务器，支持 Servlet/JSP 少量 JavaEE 规范。",-1),N=l("li",null,"概念中提到了 JavaEE 规范，那什么又是 JavaEE 规范呢? JavaEE: Java Enterprise Edition,Java 企业版。指 Java 企业级开发的技术规范总和。包含 13 项技术规范:JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF。",-1),y=l("li",null,"因为 Tomcat 支持 Servlet/JSP 规范，所以 Tomcat 也被称为 Web 容器、Servlet 容器。Servlet 需要依赖 Tomcat 才能运行。",-1),B={href:"https://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},I=l("h3",{id:"目录结构",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#目录结构","aria-hidden":"true"},"#"),t(" 目录结构")],-1),D=l("ul",null,[l("li",null,"bin：Tomcat 指令，用来启动和关闭 Tomcat 服务(可执行文件)"),l("li",null,"conf：存放的配置文件，配置服务器的端口号，用户名，密码(配置文件)"),l("li",null,"logs：存放的 jar 包，类库文件如：servlet-api.jar(tomcat 依赖的 jar 包)"),l("li",null,"webapps：应用的目录(应用发布的目录)"),l("li",null,"work：工作目录，jsp 翻译，编译之后的文件存放地址(工作目录)")],-1),L=l("h3",{id:"安装使用",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#安装使用","aria-hidden":"true"},"#"),t(" 安装使用")],-1),M={href:"http://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},W=l("li",null,"安装：解压压缩包即可。",-1),j=l("li",null,"卸载：删除目录就行了",-1),O=l("li",null,"bin/startup.bat,双击运行该文件即可",-1),G={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},V={href:"http://xn--gmqs7fv69b",target:"_blank",rel:"noopener noreferrer"},z=e("<li>可能遇到的问题： <ul><li>黑窗口一闪而过： <ul><li>原因：没有正确配置 JAVA_HOME 环境变量</li><li>解决方案：正确配置 JAVA_HOME 环境变量</li></ul></li><li>启动报错： <ul><li>找到占用的端口号，并且找到对应的进程，杀死该进程 netstat-and</li><li>修改自身的端口号 <ul><li>conf/server.xml (Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8445&quot;/&gt; 一般会将 tomcat 的默认端口号修改为 80。80 端口号是 http 协议的默认端口号。 <ul><li>好处：在访问时，就不用输入端口号</li></ul></li></ul></li></ul></li></ul></li>",1),F=e('<li>关闭 <ul><li>正常关闭： <ul><li>bin/shutdown.bat</li></ul></li><li>强制关闭： <ul><li>点击启动窗口的 ×</li><li>ctrl+C</li></ul></li></ul></li><li>配置 <ul><li>修改端口 <ul><li>Tomcat 默认的端口是 8080，要想修改 Tomcat 启动的端口号，需要修改 conf/server.xml <img src="https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/image-20220321174832918.png" alt="image-20220321174832918"><ul><li>HTTP 协议默认端口号为 80，如果将 Tomcat 端口号改为 80，则将来访问 Tomcat 时，将不用输入端口号。</li></ul></li></ul></li></ul></li>',2),U=e("<ul><li>部署项目的方式： <ul><li>直接将项目放到 webapps 目录下即可。 <ul><li>/hello：项目的访问路径--&gt;虚拟目录</li><li>简化部署：将项目打成一个 war 包，再将 war 包放置到 webapps 目录下。war 包会自动解压缩</li></ul></li><li>配置 conf/server.xml 文件 <ul><li>在<code>&lt;Host&gt;</code>标签体中配置<code>&lt;Context docBase=&quot;D:\\hello&quot; path=&quot;/hehe&quot; /&gt;</code><ul><li>docBase:项目存放的路径</li><li>path:虚拟目录</li></ul></li></ul></li><li>在<code>conf\\Catalina\\localhost</code>创建任意名称的 xml 文件。在文件中编写<code>&lt;Context docBase=&quot;D:\\hello&quot; /&gt;</code></li></ul><ul><li>虚拟目录：xml 文件的名称 <ul><li>静态项目和动态项目： <ul><li>目录结构 <ul><li>java 动态项目的目录结构： <ul><li>项目的根目录 <ul><li>WEB-INF 目录： <ul><li>web.xml：web 项目的核心配置文件</li><li>classes 目录：放置字节码文件的目录</li><li>lib 目录：放置依赖的 jar 包</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>",1);function R(K,X){const i=u("ExternalLinkIcon");return o(),s("div",null,[r,l("ul",null,[d,h,l("li",null,[l("a",p,[t("http://www.baidu.com/index.htm"),n(i)]),l("ul",null,[_,m,l("li",null,[l("a",T,[t("www.baidu.com"),n(i)]),t("：主机地址和端口号 "),g])])])]),b,l("ul",null,[v,l("li",null,[t("请求数据的组成 "),l("ul",null,[l("li",null,[t("请求行 "),l("ul",null,[k,l("li",null,[t("组成："),l("a",f,[t("https://host"),n(i)]),t(":port/path?xxx=aaa&ooo=bbb "),l("ul",null,[x,l("li",null,[l("a",P,[t("https://host"),n(i)]),t(":port/path?xxx=aaa&ooo=bbb：url "),E]),H])])])]),w])]),J]),S,l("ul",null,[C,q,l("li",null,[t("Tomcat 的相关概念: "),l("ul",null,[A,N,y,l("li",null,[t("Tomcat 的官网: "),l("a",B,[t("https://tomcat.apache.org/"),n(i)]),t(" 从官网上可以下载对应的版本进行使用。")])])])]),I,D,L,l("ul",null,[l("li",null,[t("下载："),l("a",M,[t("http://tomcat.apache.org/"),n(i)])]),W,j,l("li",null,[t("启动： "),l("ul",null,[O,l("li",null,[t("访问：浏览器输入： "),l("ul",null,[l("li",null,[l("a",G,[t("http://localhost:8080"),n(i)]),t(" 访问自己")]),l("li",null,[l("a",V,[t("http://别人的"),n(i)]),t(" ip:8080 访问别人")])])]),z])]),F]),U])}const Z=a(c,[["render",R],["__file","day06 HTTP协议和Tomcat服务器.html.vue"]]);export{Z as default};
