import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.759ff6f5.js";const p={},e=t(`<h2 id="xml-配置文件" tabindex="-1"><a class="header-anchor" href="#xml-配置文件" aria-hidden="true">#</a> xml 配置文件</h2><ul><li>可扩展标记语言(xml)：是一种用于标记电子文件使其具有结构性的标记语言 <ul><li>可扩展标记语言是一种很像超文本标记语言的标记语言。</li><li>它的设计宗旨是传输数据，而不是显示数据。</li><li>它的标签没有被预定义。您需要自行定义标签。</li><li>它被设计为具有自我描述性。</li><li>它是 W3C 的推荐标准。</li><li>是各种应用程序之间进行数据传输的最常用的工具之一</li></ul></li><li>xml 和 html 的差异 <ul><li>它不是超文本标记语言的替代。</li><li>它是对超文本标记语言的补充。</li><li>它和超文本标记语言为不同的目的而设计：</li><li>它被设计用来传输和存储数据，其焦点是数据的内容。</li><li>超文本标记语言被设计用来显示数据，其焦点是数据的外观。</li><li>超文本标记语言旨在显示信息；而 XML 旨在传输信息，它是独立于软件和硬件的信息传输工具。</li></ul></li><li>常见的解析方式 <ul><li>DOM 解析(Document Object Model) <ul><li>DOM 是用与平台和语言无关的方式表示 XML 文档的官方 W3C 标准。DOM 是以层次结构组织的节点或信息片断的集合。这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作。由于它是基于信息层次的，因而 DOM 被认为是基于树或基于对象的。</li></ul></li><li>SAX 解析(Simple API for XML) <ul><li>SAX 处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且，由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不必解析整个文档；它可以在某个条件得到满足时停止解析。一般来说，SAX 还比它的替代者 DOM 快许多。</li></ul></li><li>JDOM 解析(Java-based Document Object Model) <ul><li>JDOM 的目的是成为 Java 特定文档模型，它简化与 XML 的交互并且比使用 DOM 实现更快。由于是第一个 Java 特定模型，JDOM 一直得到大力推广和促进。正在考虑通过“Java 规范请求 JSR-102”将它最终用作“Java 标准扩展”。从 2000 年初就已经开始了 JDOM 开发。</li></ul></li><li>DOM4J 解析(Document Object Model for Java) <ul><li>DOM4J 是一个非常非常优秀的 Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的 Java 软件都在使用 DOM4J 来读写 XML，特别值得一提的是连 Sun 的 JAXM 也在用 DOM4J.</li><li>需要的 jar 包 <ul><li>dom4j-1.1.jar</li></ul></li></ul></li><li>xdm 中的#和$的区别： * $相当于字符串拼接，#相当于转义字符 <code>sql # PreparedStatment insert into student values(null,#{name},#{age},#{score}) </code><img src="https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/20220424142329.png" alt="image-20220424142329325"></li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>      $    Statment
      <span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;\${name}&#39;</span><span class="token punctuation">,</span>\${age}<span class="token punctuation">,</span>\${score}<span class="token punctuation">)</span>
      <span class="token identifier"><span class="token punctuation">\`</span><span class="token punctuation">\`</span><span class="token punctuation">\`</span>
![image-20220424142511698](https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/20220424142511.png)



\`\`<span class="token punctuation">\`</span></span>java
package note<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>Attribute<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>DocumentException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>Element<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span>SAXReader<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token keyword">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token comment">/**
 * @Description 解析xml文件
 * 需要导入dom4j-1.1.jar
 * @Author Noby
 * @Date 2023/3/21 12:03
 */</span><span class="token keyword">public</span> class XmlNote {
    <span class="token keyword">public</span> static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws MalformedURLException<span class="token punctuation">,</span> DocumentException {
        <span class="token comment">//1.获取文件字节码路径</span>
        String path <span class="token operator">=</span> XmlNote<span class="token punctuation">.</span>class<span class="token punctuation">.</span>getClassLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getResource<span class="token punctuation">(</span><span class="token string">&quot;xmlText.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getPath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        InputStream inputStream = XmlNote.class.getClassLoader().getResourceAsStream(&quot;xmlText.xml&quot;);//该方法可直接获得输入流</span>
        System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.创建文件解析器</span>
        SAXReader saxReader <span class="token operator">=</span> new SAXReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.获得文档对象</span>
        Document document <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token keyword">read</span><span class="token punctuation">(</span>new <span class="token keyword">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.获得根标签</span>
        Element rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span>getRootElement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">&quot;rootElement.asXML() : \\n&quot;</span> <span class="token operator">+</span> rootElement<span class="token punctuation">.</span>asXML<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.通过迭代器遍历根标签里的所有子标签</span>
        Iterator<span class="token operator">&lt;</span>?<span class="token operator">&gt;</span> iterator <span class="token operator">=</span> rootElement<span class="token punctuation">.</span>elementIterator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>hasNext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> {
            Element <span class="token keyword">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Attribute name <span class="token operator">=</span> <span class="token keyword">next</span><span class="token punctuation">.</span>attribute<span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取标签的属性</span>
            Attribute id <span class="token operator">=</span> <span class="token keyword">next</span><span class="token punctuation">.</span>attribute<span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">&quot;id,name = &quot;</span> <span class="token operator">+</span> id<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取属性值</span>
            System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">&quot;next.getText() = &quot;</span> <span class="token operator">+</span> <span class="token keyword">next</span><span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取标签的内容</span>
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="token comment">&lt;!--文档类型说明--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nameValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nameValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>jdbc:mysql://localhost:3306/stage1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nameValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nameValue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[e];function l(c,u){return s(),a("div",null,o)}const r=n(p,[["render",l],["__file","day01 XML配置文件及解析方式.html.vue"]]);export{r as default};
