const e=JSON.parse('{"key":"v-7926dbe4","path":"/codenotes/javase/day16%20%E6%B3%9B%E5%9E%8B%E3%80%81%E6%9E%9A%E4%B8%BE.html","title":"day16 泛型、枚举","lang":"zh-CN","frontmatter":{"title":"day16 泛型、枚举","icon":"write","category":["JavaSE"],"tag":["JavaSE"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"泛型 定义：泛型是Java中的一种特性，它允许在编写代码时使用类型参数来代替具体的类型，从而使代码更加通用和灵活。通过使用泛型，可以编写可重用的代码，同时还可以提高代码的类型安全性和可读性。; 在Java中，泛型可以应用于类、接口、方法等，通过使用泛型，可以将类型参数传递给这些结构，从而使它们能够处理不同类型的数据。例如，可以定义一个泛型类来表示一个列...","head":[["meta",{"property":"og:url","content":"https://noby.site/codenotes/javase/day16%20%E6%B3%9B%E5%9E%8B%E3%80%81%E6%9E%9A%E4%B8%BE.html"}],["meta",{"property":"og:site_name","content":"Noby"}],["meta",{"property":"og:title","content":"day16 泛型、枚举"}],["meta",{"property":"og:description","content":"泛型 定义：泛型是Java中的一种特性，它允许在编写代码时使用类型参数来代替具体的类型，从而使代码更加通用和灵活。通过使用泛型，可以编写可重用的代码，同时还可以提高代码的类型安全性和可读性。; 在Java中，泛型可以应用于类、接口、方法等，通过使用泛型，可以将类型参数传递给这些结构，从而使它们能够处理不同类型的数据。例如，可以定义一个泛型类来表示一个列..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-20T13:13:56.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:modified_time","content":"2023-03-20T13:13:56.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"类型擦除","slug":"类型擦除","link":"#类型擦除","children":[]}]},{"level":2,"title":"泛型通配符","slug":"泛型通配符","link":"#泛型通配符","children":[{"level":3,"title":"枚举enumerate","slug":"枚举enumerate","link":"#枚举enumerate","children":[]}]}],"git":{"createdTime":1678691437000,"updatedTime":1679318036000,"contributors":[{"name":"noby","email":"1326981297@qq.com","commits":2}]},"readingTime":{"minutes":6.89,"words":2067},"filePathRelative":"codenotes/javase/day16 泛型、枚举.md","localizedDate":"2023年3月13日"}');export{e as data};
