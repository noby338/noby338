import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as d,b as l,d as t,a as e,e as i,r as c}from"./app.759ff6f5.js";const s={},r=l("h2",{id:"git命令",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#git命令","aria-hidden":"true"},"#"),t(" git命令：")],-1),a={href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"},g=l("thead",null,[l("tr",null,[l("th",null,"git指令"),l("th",null,"作用")])],-1),h=l("tr",null,[l("td",null,[l("code",null,"ssh-keygen -t rsa -C <email>")]),l("td",null,[t("创建SSH Key，位置位于%HomePath%/.ssh目录，其中的"),l("code",null,"id_rsa"),t("为私钥，"),l("code",null,"id_rsa.pub"),t("为公钥(公钥为github填入的参数)")])],-1),_=l("tr",null,[l("td",null,[l("code",null,"ssh -v git@43.139.179.52")]),l("td",null,"ssh远程连接指定服务器")],-1),m=l("tr",null,[l("td"),l("td")],-1),b={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},f=l("td",null,"设置全局用户名(其配置的位置位于%HomePath%.gitconfig)(--global表示全局，所有的全局配置将写进%HomePath%.gitconfig)",-1),p=l("tr",null,[l("td",null,[t('git config --global user.email "'),l("a",{href:"mailto:1326981297@qq.com"},"1326981297@qq.com"),t('"')]),l("td",null,"设置全局邮箱(其配置的位置位于%HomePath%.gitconfig)")],-1),k={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},D=l("td",null,"显示用户名",-1),y={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},H=l("td",null,[t("设置局部用户名(当前文件夹)(仓库级别"),l("code",null,"--local"),t("(默认不写)，本地配置将写进.git/.gitconfig)")],-1),I=l("tr",null,[l("td"),l("td")],-1),w=l("tr",null,[l("td",null,[l("code",null,"git init")]),l("td",null,"获取本地仓库，生成.git文件夹")],-1),v=l("tr",null,[l("td",null,[l("code",null,"git status")]),l("td",null,[t("查看文件的状态"),l("br"),t("Untracked files:表示工作区的该文件不存在暂存区中"),l("br"),t("Changes not staged for commit:表示工作区的该文件与暂存区中的该文件不同"),l("br"),t("Changes to be committed:表示暂存区的文件与本地库的该文件不同"),l("br"),t("nothing to commit, working tree clean:表示工作区、暂存区、本地库的文件都相同"),l("br"),t("Your branch is ahead of "),l("code",null,"<name>/<branch>"),t(" by 1 commit:表示远程库"),l("code",null,"<name>/<branch>"),t("的文件与本地库的该文件不同")])],-1),x=l("tr",null,[l("td",null,[l("code",null,"git add <file>")]),l("td",null,[t("将工作区文件添加到暂存区由git管理，开始跟踪（track），被添加到暂存区的文件将会一直在暂存区，除非工作区的该文件删除或者使用"),l("code",null,"git rm --cached <file>"),t("删除暂存区的该文件，多次添加同一文件的不同版本只是在这基础上更新")])],-1),E=l("tr",null,[l("td",null,[l("code",null,"git commit -m <message>")]),l("td",null,"将暂存区提交到本地仓库")],-1),A=l("tr",null,[l("td"),l("td")],-1),q=l("tr",null,[l("td",null,[l("code",null,"git diff <file>")]),l("td",null,"查看工作区文件相对于暂存区文件的不同")],-1),P=l("tr",null,[l("td",null,[l("code",null,"git diff HEAD -- <file>")]),l("td",null,"查看工作区文件相对于本地库文件的不同")],-1),C=l("tr",null,[l("td",null,[l("code",null,"git ls-files -s``git cat-file -p")]),l("td",null,"查看暂存区的文件")],-1),N=l("tr",null,[l("td",null,[l("code",null,"git rm --cached <file>")]),l("td",null,"从暂存区删除某文件")],-1),S=l("tr",null,[l("td",null,[l("code",null,"git rm <file>")]),l("td",null,"从暂存区和工作区删除某文件")],-1),V=l("tr",null,[l("td",null,[l("code",null,"git checkout -- <file>")]),l("td",null,"将工作区的该文件恢复成与暂存区的该文件相同")],-1),B=l("tr",null,[l("td",null,[l("code",null,"git checkout <file>")]),l("td",null,"将工作区的该文件恢复成与本地库的该文件相同")],-1),G=l("tr",null,[l("td",null,[l("code",null,"git reset HEAD <file>")]),l("td",null,"将暂存区的该文件恢复成与本地库的该文件相同")],-1),L=l("tr",null,[l("td",null,[l("code",null,"git log")]),l("td",null,"查看提交日志")],-1),K=l("tr",null,[l("td",null,[l("code",null,"git log --pretty=oneline")]),l("td",null,"查看美化的提交日志")],-1),M=l("tr",null,[l("td",null,[l("code",null,"git config --global alias.l 'log --pretty=oneline --abbrev-commit --all --graph'")]),l("td",null,[t("设置"),l("code",null,"l"),t("命令的git别名为：git log --pretty=oneline --abbrev-commit --all --graph，(--global表示全局，所有的全局配置将写进%HomePath%.gitconfig) (全局级别"),l("code",null,"--global"),t(" 配置，仓库级别"),l("code",null,"--local"),t("(默认不写)、系统级别 "),l("code",null,"--system"),t(" 亦如此)")])],-1),R=l("tr",null,[l("td",null,[l("code",null,"git config --global -l | grep alias ")]),l("td",null,"查看所有的git别名")],-1),T=l("tr",null,[l("td",null,[l("code",null,"git config --unset --global alias.l")]),l("td",null,[t("取消"),l("code",null,"l"),t("命令的git别名")])],-1),U=l("tr",null,[l("td",null,[l("code",null,"git reset --hard commitID")]),l("td",null,"目前的本地库版本退回到指定版本库版本（commitID提交日志中查看）(--hard表示将工作区和暂存区的该文件一并退回)")],-1),Y=l("tr",null,[l("td",null,[l("code",null,"git reset --hard HEAD^")]),l("td",null,"目前的本地库版本退回到上一个版本库版本(HEAD^^表示上2个，HEAD~num表示上num个)")],-1),j=l("tr",null,[l("td",null,[l("code",null,"git reflog")]),l("td",null,"查看已经删除的提交记录（版本退回后，之后版本的提交日志会被删除，可以通过该方法查看）")],-1),z=l("tr",null,[l("td"),l("td")],-1),F=l("tr",null,[l("td",null,[l("code",null,".gitignore")]),l("td",null,[t("文件中输入忽略的文件名或文件夹名（后加/），可以不纳入git的管理，即为在add的阶段忽略该文件或文件夹从工作区添加到暂存区。但.gitignore中的忽略配置将不会删除，已经添加到暂存区的文件或文件夹(可通过"),l("code",null,"git rm --cached <file>"),t("删除)")])],-1),J=l("tr",null,[l("td"),l("td")],-1),O=l("tr",null,[l("td",null,[l("code",null,"git branch")]),l("td",null,"查看分支列表及当前分支")],-1),Q=l("tr",null,[l("td",null,[l("code",null,"git branch <branch>")]),l("td",null,[t("新建分支"),l("code",null,"<branch>")])],-1),W=l("tr",null,[l("td",null,[l("code",null,"git checkout <branch>"),l("br"),l("code",null,"git switch <branch>")]),l("td",null,[t("切换分支"),l("code",null,"<branch>"),t("(swich为新的指令)。当切换分支的时候，Git 会用"),l("code",null,"<branch>"),t("分支的最后提交的快照替换你的工作区和暂存区的内容。当工作区或暂存区相对当前分支有新的内容时存在不可切换和可切换的两种情况。一，当两个分支文件完全相同时，可以切换，并在行底给出M "),l("code",null,"<file>"),t(" 提示；二，当两个分支的文件不完全相同时，不可以切换，提示需要将工作区和暂存区的文件stash(文件相同不一定commitID相同)")])],-1),X=l("tr",null,[l("td",null,[l("code",null,"git checkout -b <branch>"),l("br"),l("code",null,"git switch -c <branch>")]),l("td",null,[t("创建并切换分支"),l("code",null,"<branch>")])],-1),Z=l("tr",null,[l("td",null,[l("code",null,"git merge <branch>")]),l("td",null,[l("strong",null,"合并分支"),l("code",null,"<branch>"),t("到当前分支：将更新当前分支的内容为当前分支和"),l("code",null,"<branch>"),t("分支的合并分支，而"),l("code",null,"<branch>"),t("分支保持不变。合并的原则是同时保留当前分支和"),l("code",null,"<branch>"),t("分支相对历史共同节点的改动部分；若两分支都存在对共同节点的同一部分的改动，则需要执行手动解决冲突，然后add和commit。若两分支不存在对共同节点的同一部分的改动，则git将会执行快速合并，并自动add和commmit"),l("br"),l("strong",null,"快速合并"),t(":若两分支不存在对共同节点的同一部分的改动，将执行快速合并，且"),l("code",null,"<branch>"),t("上相对共同节点的修改部分将代替当前分支的对应部分"),l("br"),l("strong",null,"解决冲突"),t(":当两分支都存在对共同节点的同一部分的改动则需要手动解决冲突，git会将两个分支的冲突部分汇总到工作区的该文件中，修改工作区文件解决掉冲突后还需add和commit到当前分支，至此当前分支的冲突解决完成，")])],-1),$=l("tr",null,[l("td",null,[l("code",null,"git merge --no-ff <branch>")]),l("td",null,"使用非快速合并自动合并，需要输入commit消息")],-1),ll=l("tr",null,[l("td",null,[l("code",null,"git log --graph")]),l("td",null,"查看分支合并图")],-1),tl=l("tr",null,[l("td",null,[l("code",null,"git merge --abort")]),l("td",null,"解决合并冲突的过程中取消合并分支")],-1),nl=l("tr",null,[l("td",null,[l("code",null,"git branch -d <branch>")]),l("td",null,[t("删除分支"),l("code",null,"<branch>")])],-1),el=l("tr",null,[l("td",null,[l("code",null,"git stash")]),l("td",null,"储藏目前分支的暂存区和工作区的工作现场")],-1),ol=l("tr",null,[l("td",null,[l("code",null,"git stash list")]),l("td",null,"查看工作现场")],-1),ul=l("tr",null,[l("td",null,[l("code",null,"git stash apply <stash>")]),l("td",null,"恢复工作现场到当前分支(不会删除储藏的该工作现场)(非当前分支的工作现场也可也恢复到当前分支)")],-1),dl=l("tr",null,[l("td",null,[l("code",null,"git stash drop <stash>")]),l("td",null,"删除工作现场")],-1),il=l("tr",null,[l("td",null,[l("code",null,"git stash pop")]),l("td",null,"恢复工作现场到当前分支，同时删除储藏的该工作现场(非当前分支的工作现场也可也恢复到当前分支)")],-1),cl=l("tr",null,[l("td",null,[l("code",null,"git cherry-pick <commit>")]),l("td",null,"当两个分支来自同一个节点时，可复制一个分支commit到当前分支(对当前分支做同样的commit)")],-1),sl=l("tr",null,[l("td",null,[l("code",null,"git tag <name>")]),l("td",null,"标记在当前分支当前点标签")],-1),rl=l("tr",null,[l("td",null,[l("code",null,"git tag <name> <commitID>")]),l("td",null,"在指定commitID打标签")],-1),al=l("tr",null,[l("td",null,[l("code",null,"git tag")]),l("td",null,"查看标记的所有标签(标签不是按时间顺序列出，而是按字母排序的。)")],-1),gl=l("tr",null,[l("td",null,[l("code",null,"git tag -a <tagname> -m <message>")]),l("td",null,"书写标签详情")],-1),hl=l("tr",null,[l("td",null,[l("code",null,"git show <tagname>")]),l("td",null,"查看标签信息")],-1),_l=l("tr",null,[l("td",null,[l("code",null,"git tag -d <tagname>")]),l("td",null,"删除指定标签")],-1),ml=l("tr",null,[l("td",null,[l("code",null,"git push <name> <tagname>")]),l("td",null,[t("推送"),l("code",null,"<tagname>"),t("标签到"),l("code",null,"<name>"),t("远程库(默认未指定推送标签是不会把标签推送到远程)")])],-1),bl=l("tr",null,[l("td",null,[l("code",null,"git push <name> --tags")]),l("td",null,[t("推送所有标签到"),l("code",null,"<name>"),t("远程库")])],-1),fl=l("tr",null,[l("td",null,[l("code",null,"git push <name> :refs/tags/<tagname>")]),l("td",null,[t("删除"),l("code",null,"<name>"),t("远程的"),l("code",null,"<tagname>"),t("标签(前提是删除本地的"),l("code",null,"<tagname>"),t("标签)")])],-1),pl=l("tr",null,[l("td"),l("td")],-1),kl=l("tr",null,[l("td",null,[l("code",null,"git remote")]),l("td",null,"查看远程库列表")],-1),Dl=l("tr",null,[l("td",null,[l("code",null,"git remote -v")]),l("td",null,"当前远程库的信息")],-1),yl=l("tr",null,[l("td",null,[l("code",null,"git remote add <name> <url>")]),l("td",null,[t("添加远程库"),l("code",null,"<name>"),t("为远程库的名，一般为origin。"),l("code",null,"<url>"),t("为远程库的地址("),l("code",null,"<name>"),t("为本地库为方便关联远程库的url而存在的，使用"),l("code",null,"<name>"),t("为了在本地使用别名操作该url)")])],-1),Hl=l("tr",null,[l("td",null,[l("code",null,"git remote rm <name>")]),l("td",null,[t("解除本地库和远程库"),l("code",null,"<name>"),t("的关系，并不是物理上删除了远程库")])],-1),Il=l("tr",null,[l("td",null,[l("code",null,"git push (-u) <name> <branch>")]),l("td",null,[t("将本地库的当前分支推送到"),l("code",null,"<name>"),t("远程库的"),l("code",null,"<branch>"),t("分支，并且将会在远程库自动合并当前分支到"),l("code",null,"<name>/<branch>"),t("分支。(-u表示将远程分支"),l("code",null,"<name>/<branch>"),t("与当前分支关联)")])],-1),wl=l("tr",null,[l("td",null,[l("code",null,"git push <name> <branch> -f")]),l("td",null,"强制推送到远程仓库(一般为将远程某分支的版本回退)")],-1),vl=l("tr",null,[l("td",null,[l("code",null,"git push --all <name> -f ")]),l("td",null,"将本地的所有分支强制推送到远程(一般为远程库的第一次初始化)")],-1),xl=l("tr",null,[l("td",null,[l("code",null,"git pull")]),l("td",null,"将远程分支的对应当前分支拉取到工作区(前提是已经关联当前分支到远程分支)，同时合并(满足快速合并会执行快速合并)")],-1),El=l("tr",null,[l("td",null,[l("code",null,"git fetch")]),l("td",null,[t("从远程获取最新版本到远程仓库副本，同pull的区别在于fetch不会自动merge. 而git pull是从远程获取最新版本并merge到本地仓库. 从安全角度出发，git fetch比git pull更安全，因为我们可以先比较本地与远程的区别后，选择性的合并。通常用于查看其他人正在处理的内容进度"),l("br"),l("code",null,"git pull"),t(" = "),l("code",null,"git fetch"),t(" + "),l("code",null,"git merge")])],-1),Al=l("tr",null,[l("td",null,[l("code",null,"git clone <url>")]),l("td",null,"克隆远程的url项目，到当前的路径，注意会在操作git的目录下创建远程项目相同的项目目录")],-1),ql=l("tr",null,[l("td",null,[l("code",null,"git branch --set-upstream-to=<name>/<branch> <branch>")]),l("td",null,"将远程分支与本地分支关联")],-1),Pl=l("tr",null,[l("td",null,[l("code",null,"git branch -vv")]),l("td",null,"查看本地和远程关联的分支")],-1),Cl=l("tr",null,[l("td",null,[l("code",null,"git rebase")]),l("td",null,[t("rebase操作可以把本地未push的分叉提交历史整理成直线"),l("br"),t("在push某本地分支到远程分支之前，该远程分支若有改变，应先pull到本地merge，再push到远程让github自动合并。但这样做会在本地新建一条用于存放pull下来的分支，该分支用于和本地分支merge。该多余的分支rebase命令优化。优化的原理把merge的过程调整到本地分支的改动之前，这样便不必创建新的分支")])],-1),Nl=i('<ul><li>项目目录 <ul><li>.git文件夹 <ul><li>本地仓库(版本库)(Repository) <ul><li>指针 <ul><li>HEAD</li></ul></li><li>分支 <ul><li>master分支 <ul><li>commit时间线 <ul><li>commitID3(HEAD指向的)</li><li>commitID2</li><li>commitID1</li></ul></li></ul></li><li>A分支 <ul><li>commit时间线</li></ul></li></ul></li></ul></li><li>暂存区(Stage、index)</li></ul></li><li>工作区(working tree)</li></ul></li><li>远程仓库(remote) <ul><li>分支 <ul><li>master分支 <ul><li>commit时间线 <ul><li>commitID3</li><li>commitID2</li><li>commitID1</li></ul></li></ul></li><li>A分支 <ul><li>commit时间线</li></ul></li></ul></li></ul></li></ul><p><img src="https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/image-20221103132542796.png" alt="image-20221103132542796"><img src="https://markdown-1308523627.cos.ap-chengdu.myqcloud.com/typora/image-20221104222117421.png" alt="image-20221104222117421"></p><ul><li>注意： <ul><li>当本地仓库的版本低于远程仓库的版本时，应该先拉取远程仓库的版本，再推送本地版本</li><li>退出 vim 编辑器 :q enter</li><li>任何文件的增删改（包括合并分支）都是在本地仓库进行，然后在推送到远程仓库</li><li>新建项目没配置gitignore文件，导致node_modules文件上传到了git仓库。.gitignore文件为忽略还未从工作区添加到暂存区的文件，对于已经推送到远程仓库的node_modules，暂存区中已经存在，直接在.gitignore文件中写入该node_modules并不会删除暂存区中的node_modules，因此需要使用命令删除暂存区中的node_modules.下面是解决方法，可以删除仓库已上传的node_modules文件： <ul><li>git rm -r --cached node_modules</li><li>git commit -m &#39;delete node_modules file&#39;</li><li>git push origin master</li></ul></li></ul></li></ul>',3);function Sl(Vl,Bl){const n=c("ExternalLinkIcon");return u(),d("div",null,[r,l("ul",null,[l("li",null,[t("git的基础知识学习推荐："),l("a",a,[t("Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)"),e(n)])])]),l("table",null,[g,l("tbody",null,[h,_,m,l("tr",null,[l("td",null,[t("git config --global "),l("a",b,[t("user.name"),e(n)]),t(' "noby"')]),f]),p,l("tr",null,[l("td",null,[t("git config --global "),l("a",k,[t("user.name"),e(n)])]),D]),l("tr",null,[l("td",null,[t("git config "),l("a",y,[t("user.name"),e(n)]),t(' "noby"')]),H]),I,w,v,x,E,A,q,P,C,N,S,V,B,G,L,K,M,R,T,U,Y,j,z,F,J,O,Q,W,X,Z,$,ll,tl,nl,el,ol,ul,dl,il,cl,sl,rl,al,gl,hl,_l,ml,bl,fl,pl,kl,Dl,yl,Hl,Il,wl,vl,xl,El,Al,ql,Pl,Cl])]),Nl])}const Kl=o(s,[["render",Sl],["__file","git命令.html.vue"]]);export{Kl as default};
